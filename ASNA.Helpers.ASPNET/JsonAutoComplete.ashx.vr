Using System
Using System.Data
Using System.Configuration
Using System.Web
Using System.Web.Security
Using System.Web.UI
Using System.Web.UI.WebControls
Using System.Web.UI.WebControls.WebParts
Using System.Web.UI.HtmlControls
Using ASNA.DataGate.Client
Using System.Configuration


DclNameSpace ASNA.Helpers.ASPNET

/// <summary>
/// Summary description for CustomerJsonLookUp
/// </summary>
BegClass JsonAutoComplete Access(*Public)  Implements(IHttpHandler)

    BegSr GetArgs
        DclSrParm Context Type(HttpContext)
        DclSrParm Args    Type(ASNA.Helpers.DataServices.QueryFileInstanceArgs) 

        args.Inputs.library      = GetQueryStringValue(Context,"library")
        args.Inputs.file         = GetQueryStringValue(Context,"file")
        args.Inputs.fieldsList   = GetQueryStringValue(Context,"fieldsList")
        args.Inputs.rows         = GetQueryStringValue(Context,"rows")
        args.Inputs.Query        = GetQueryStringValue(Context,"query")
        CollectQueryFields(Context,Args) 
    EndSr

    BegSr CollectQueryFields 
        DclSrParm Context Type(HttpContext)
        DclSrParm Args    Type(ASNA.Helpers.DataServices.QueryFileInstanceArgs) 

        DclFld i          Type(*Integer4)
        DclFld Field      Type(*String)
        DclFld Value      Type(*String)         

        Do FromVal(1) ToVal(3) Index(i)
            Field = String.Format("qryfld{0}",i)
            Value = String.Format("qryval{0}",i)
            If (context.Request[Field] AND context.Request[Value])
                Args.Inputs.QueryFields.Add(*New ASNA.Helpers.DataServices.QueryField(context.Request[Field],context.Request[Value]))
            EndIf
        EndDo
    EndSr
    
    BegFunc GetQueryStringValue Type(*String)
        DclSrParm Context Type(HttpContext)
        DclSrParm Key     Type(*String)

        If (Context.Request[Key] = *Nothing)             
            Throw *New ArgumentException(Key + " argument not provided.")             
        EndIf 
        LeaveSr Context.Request[Key]
    EndFunc

    BegSr ProcessRequest Access(*Public) Implements(IHttpHandler.ProcessRequest)
        DclSrParm Context Type(HttpContext)

        DclFld QFile         Type(ASNA.Helpers.DataServices.QueryFile)
        DclFld Args          Type(ASNA.Helpers.DataServices.QueryFileInstanceArgs) New()
        DclFld JsonAdapter   Type(ASNA.Helpers.DataServices.ToJsonAdapter) 
        DclFld db            Type(AdgConnection)
        DclFld Json          Type(*String)
        DclFld DBName        Type(*String) 
        DclFld ActiveDBName  Type(*String) 

        Try 
            ActiveDBName =  ConfigurationManager.AppSettings["ActiveDBName"]
            DBName =  ConfigurationManager.AppSettings[ActiveDBName]
            db = *New AdgConnection(DBName)
            db.Open()
            GetArgs(Context,Args)
            Args.Inputs.Options.Add("indentJson",*True)
            JsonAdapter = *New ASNA.Helpers.DataServices.ToJsonAdapter(Args) 

            QFile = *New ASNA.Helpers.DataServices.QueryFile(db,args,JsonAdapter)

            Json = QFile.GetList() *As *String
        Catch Error Type(System.Exception) 
            Throw Error 
        EndTry 

        context.Response.ContentType = "application/json"
        context.Response.Write(json) 
    EndSr

    BegProp IsReusable Type(*Boolean) Access(*Public) Implements(IHttpHandler.IsReusable)
        BegGet
            LeaveSr *False
        EndGet
    EndProp
	
EndClass
