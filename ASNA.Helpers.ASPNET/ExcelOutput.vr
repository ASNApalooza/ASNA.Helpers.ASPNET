Using System
Using System.Data
Using System.Collections
Using System.Collections.Specialized
Using System.Configuration
Using System.Web
Using System.Web.Security
Using System.Web.UI
Using System.Web.UI.WebControls
Using System.Web.UI.WebControls.WebParts
Using System.Web.UI.HtmlControls
Using ASNA.DataGate.Client
Using System.Configuration
Using System.IO 
Using ClosedXMl.Excel

DclNameSpace ASNA.Helpers.ASPNET

/// <summary>
/// Summary description for CustomerJsonLookUp
/// </summary>
BegClass ExcelOutput Access(*Public)  Implements(IHttpHandler)

    BegSr GetArgs
        DclSrParm Context Type(HttpContext)
        DclSrParm Query   Type(ASNA.Helpers.DataServices.QueryDriver)

        Query.args.Inputs.library      = GetQueryStringValue(Context,"library")
        Query.args.Inputs.file         = GetQueryStringValue(Context,"file")
        Query.args.Inputs.fieldsList   = GetQueryStringValue(Context,"fieldsList")
        Query.args.Inputs.rows         = GetQueryStringValue(Context,"rows")
        Query.args.Inputs.Query        = GetQueryStringValue(Context,"query")
        CollectQueryFields(Context,Query.Args) 
    EndSr

    BegSr CollectQueryFields 
        DclSrParm Context Type(HttpContext)
        DclSrParm Args    Type(ASNA.Helpers.DataServices.QueryFileInstanceArgs) 

        DclFld i          Type(*Integer4)
        DclFld Field      Type(*String)
        DclFld Value      Type(*String)         

        Do FromVal(1) ToVal(3) Index(i)
            Field = String.Format("qryfld{0}",i)
            Value = String.Format("qryval{0}",i)
            If (context.Request[Field] AND context.Request[Value])
                Args.Inputs.QueryFields.Add(*New ASNA.Helpers.DataServices.QueryField(context.Request[Field],context.Request[Value]))
            EndIf
        EndDo
    EndSr
    
    BegFunc GetQueryStringValue Type(*String)
        DclSrParm Context Type(HttpContext)
        DclSrParm Key     Type(*String)


        If (Context.Request[Key] = *Nothing)             
            Throw *New ArgumentException(Key + " argument not provided.")             
        EndIf 
        LeaveSr Context.Request[Key]
    EndFunc

    BegSr ProcessRequest Access(*Public) Implements(IHttpHandler.ProcessRequest)
        DclSrParm Context Type(HttpContext)

        DclFld Query         Type(ASNA.Helpers.DataServices.QueryDriver) 
        DclFld db            Type(AdgConnection)
        DclFld DBName        Type(*String) 
        DclFld ActiveDBName  Type(*String) 
        DclFld ExcelAdapter  Type(ASNA.Helpers.DataServices.ToExcelAdapter)
        DclFLd MemStream     Type(System.IO.MemoryStream) New()
        DclFld Workbook      Type(XLWorkBook) 

        Try 
            ActiveDBName =  ConfigurationManager.AppSettings["ActiveDBName"]
            DBName =  ConfigurationManager.AppSettings[ActiveDBName]
            db = *New AdgConnection(DBName)
            db.Open()
            Query = *New ASNA.Helpers.DataServices.QueryDriver(db)



            GetArgs(Context,Query)
            ExcelAdapter = *New ASNA.Helpers.DataServices.ToExcelAdapter(Query.Args) 
            Query.OverrideAdapter(ExcelAdapter)


            context.Response.ContentType = "application/json"
            context.Response.AddHeader("content-disposition", "attachment;filename='HelloWorld.xlsx'")

            //http://localhost:8080/services/ExcelOutput.ashx?library=examples&file=cmastnewl2&fieldsList=CMCUSTNO:value,CMNAME:label&rows=12&qryfld1=CMNAME&qryval1=Smi&query=CMNAME%3E%3D%27%7BCMNAME%7D%27
            
            WorkBook = Query.Exec() *As XLWorkBook
            WorkBook.SaveAs(MemStream)
            MemStream.WriteTo(context.Response.OutputStream) 
            context.Response.End() 

        Catch Error Type(System.Exception) 
            Throw Error 
        EndTry 
    EndSr

    BegProp IsReusable Type(*Boolean) Access(*Public) Implements(IHttpHandler.IsReusable)
        BegGet
            LeaveSr *False
        EndGet
    EndProp
	
EndClass
